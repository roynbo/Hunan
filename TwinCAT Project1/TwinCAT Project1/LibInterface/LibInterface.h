///////////////////////////////////////////////////////////////////////////////
// LibInterface.h
#pragma once

#include "LibInterfaceInterfaces.h"
#include "AdsR0.h"
#include"Robot.h"

// parameter ids for TwinCAT module LibInterface with disabled code generation
// could be moved to LibInterfaceServices.h
const PTCID PID_LibInterfaceAdsPort        = 0x00000002;

class CLibInterface 
	: public ITComObject
	, public ITcADI
	, public ITcWatchSource
///<AutoGeneratedContent id="InheritanceList">
	, public ITcCyclic
///</AutoGeneratedContent>
	, public CAdsR0FifoPort
{
public:
	DECLARE_IUNKNOWN()
	DECLARE_IPERSIST(CID_LibInterfaceCLibInterface)
	DECLARE_ITCOMOBJECT_LOCKOP()
	DECLARE_ITCADI()
	DECLARE_ITCWATCHSOURCE()
	DECLARE_OBJPARAWATCH_MAP()
	DECLARE_OBJDATAAREA_MAP()

	CLibInterface();
	virtual	~CLibInterface();


///<AutoGeneratedContent id="InterfaceMembers">
	// ITcCyclic
	virtual HRESULT TCOMAPI CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context);

///</AutoGeneratedContent>

	// CAds
	virtual	void	AdsReadWriteInd
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG indexGroup,
		ULONG indexOffset, 
		ULONG cbReadLength, 
		ULONG cbWriteLength, 
		PVOID pData 
	);

	virtual void AdsReadCon
	(
		AmsAddr& rAddr, 
		ULONG invokeId, 
		ULONG result, 
		ULONG cbLength, 
		PVOID pData
	);

protected:
	DECLARE_ITCOMOBJECT_SETSTATE();

	HRESULT AddModuleToCaller();
	VOID RemoveModuleFromCaller();

	// Tracing
	CTcTrace m_Trace;

///<AutoGeneratedContent id="Members">
	TcTraceLevel m_TraceLevelMax;
	WORD m_DefaultAdsPort;
	WORD m_ContextAdsPort;
	ULONG m_Counter;
	LibInterfaceInputs m_Inputs;
	LibInterfaceOutputs m_Outputs;
	ITcCyclicCallerInfoPtr m_spCyclicCaller;
///</AutoGeneratedContent>

	void SubmitAdsReadReq();
	enum 
	{
		invokeIdReadByOidAndPid = 1
	};
	ULONG  m_ReadByOidAndPid;
	bool	 libInitSuccess = false;          //检测机器人是否已经初始化成功的标志位,为false表示未对接口初始化
	int		 instruct = 0;					//上位机发送过来的指令
	double   velo = 0;							//上位机发送过来的速度		
	double	 pos = 0;							//上位机发送过来的位置移动量
	double   carVeloX = 0;							//上位机发送过来车X速度
	double   carVeloY = 0;							//上位机发送过来车Y速度
	double   handVelX = 0;							//上位机发送过来车X速度
	double   handVelY = 0;							//上位机发送过来车Y速度
	int		 indexCrl = 0;					//上位机发送过来的要控制的轴索引
	int		 indexSta = 0;					//上位机发送过来的要读取轴的轴的索引
	int sign = 0;
	int tpp = 0;
	Robot robot;
	int flag = 0;
	LONGLONG Clamp_InitPosition = 0;
private:
	void	 ReadFromPLC();					//从PLC读入机器人的伺服运行状态
	void	 WriteToPLC();					//向PLC写入机器人的伺服运行状态
};
