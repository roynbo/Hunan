///////////////////////////////////////////////////////////////////////////////
// LibInterface.cpp
#include "TcPch.h"
#pragma hdrstop

#include "LibInterface.h"
#include "LibInterfaceAds.h"
#ifdef _DEBUG
#define new DEBUG_NEW
#endif
DEFINE_THIS_FILE()

///////////////////////////////////////////////////////////////////////////////
// CLibInterface
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Collection of interfaces implemented by module CLibInterface
BEGIN_INTERFACE_MAP(CLibInterface)
	INTERFACE_ENTRY_ITCOMOBJECT()
	INTERFACE_ENTRY(IID_ITcADI, ITcADI)
	INTERFACE_ENTRY(IID_ITcWatchSource, ITcWatchSource)
///<AutoGeneratedContent id="InterfaceMap">
	INTERFACE_ENTRY(IID_ITcCyclic, ITcCyclic)
///</AutoGeneratedContent>
END_INTERFACE_MAP()

IMPLEMENT_ITCOMOBJECT(CLibInterface)
IMPLEMENT_ITCOMOBJECT_SETSTATE_LOCKOP2(CLibInterface)
IMPLEMENT_ITCADI(CLibInterface)
IMPLEMENT_ITCWATCHSOURCE(CLibInterface)

///////////////////////////////////////////////////////////////////////////////
// Set parameters of CLibInterface 
BEGIN_SETOBJPARA_MAP(CLibInterface)
	SETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="SetObjectParameterMap">
	SETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	SETOBJPARA_VALUE(PID_LibInterfaceDefaultAdsPort, m_DefaultAdsPort)
	SETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	SETOBJPARA_VALUE(PID_LibInterfaceCounter, m_Counter)
	SETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
END_SETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get parameters of CLibInterface 
BEGIN_GETOBJPARA_MAP(CLibInterface)
	GETOBJPARA_DATAAREA_MAP()
///<AutoGeneratedContent id="GetObjectParameterMap">
	GETOBJPARA_VALUE(PID_TcTraceLevel, m_TraceLevelMax)
	GETOBJPARA_VALUE(PID_LibInterfaceDefaultAdsPort, m_DefaultAdsPort)
	GETOBJPARA_VALUE(PID_Ctx_AdsPort, m_ContextAdsPort)
	GETOBJPARA_VALUE(PID_LibInterfaceCounter, m_Counter)
	GETOBJPARA_ITFPTR(PID_Ctx_TaskOid, m_spCyclicCaller)
///</AutoGeneratedContent>
	GETOBJPARA_TYPE_CODE(PID_LibInterfaceAdsPort, WORD, *p = AmsGetPort())
END_GETOBJPARA_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get watch entries of CLibInterface
BEGIN_OBJPARAWATCH_MAP(CLibInterface)
	OBJPARAWATCH_DATAAREA_MAP()
///<AutoGeneratedContent id="ObjectParameterWatchMap">
	OBJPARAWATCH_VALUE(PID_LibInterfaceCounter, m_Counter)
///</AutoGeneratedContent>
END_OBJPARAWATCH_MAP()

///////////////////////////////////////////////////////////////////////////////
// Get data area members of CLibInterface
BEGIN_OBJDATAAREA_MAP(CLibInterface)
///<AutoGeneratedContent id="ObjectDataAreaMap">
	OBJDATAAREA_VALUE(ADI_LibInterfaceInputs, m_Inputs)
	OBJDATAAREA_VALUE(ADI_LibInterfaceOutputs, m_Outputs)
///</AutoGeneratedContent>
END_OBJDATAAREA_MAP()


///////////////////////////////////////////////////////////////////////////////
CLibInterface::CLibInterface()
	: m_Trace(m_TraceLevelMax, m_spSrv)
{
///<AutoGeneratedContent id="MemberInitialization">
	m_TraceLevelMax = tlAlways;
	m_DefaultAdsPort = 0;
	m_ContextAdsPort = 0;
	m_Counter = 0;
	memset(&m_Inputs, 0, sizeof(m_Inputs));
	memset(&m_Outputs, 0, sizeof(m_Outputs));
///</AutoGeneratedContent>
}

///////////////////////////////////////////////////////////////////////////////
CLibInterface::~CLibInterface() 
{
}

///////////////////////////////////////////////////////////////////////////////
// State Transitions 
///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_ITCOMOBJECT_SETOBJSTATE_IP_PI(CLibInterface)

///////////////////////////////////////////////////////////////////////////////
// State transition from PREOP to SAFEOP
//
// Initialize input parameters 
// Allocate memory
HRESULT CLibInterface::SetObjStatePS(PTComInitDataHdr pInitData)
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;
	IMPLEMENT_ITCOMOBJECT_EVALUATE_INITDATA(pInitData);

	hr = SUCCEEDED(hr) ? InitAmsPort(m_spSrv, 0xBF02) : hr;

	// cleanup on failure
	if (FAILED(hr))
	{
		ShutdownAmsPort();
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to OP
//
// Register with other TwinCAT objects
HRESULT CLibInterface::SetObjStateSO()
{
	m_Trace.Log(tlVerbose, FENTERA);
	HRESULT hr = S_OK;

	// TODO: Add any additional initialization


	// If following call is successful the CycleUpdate method will be called, 
	// possibly even before this method has been left.
	hr = FAILED(hr) ? hr : AddModuleToCaller(); 

	// Cleanup if transition failed at some stage
	if ( FAILED(hr) )
	{
		RemoveModuleFromCaller(); 
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from OP to SAFEOP
HRESULT CLibInterface::SetObjStateOS()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;

	RemoveModuleFromCaller(); 

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
// State transition from SAFEOP to PREOP
HRESULT CLibInterface::SetObjStateSP()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	ShutdownAmsPort();

	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///<AutoGeneratedContent id="ImplementationOf_ITcCyclic">
HRESULT CLibInterface::CycleUpdate(ITcTask* ipTask, ITcUnknown* ipCaller, ULONG_PTR context)
{
	HRESULT hr = S_OK;

	// handle pending ADS indications and confirmations
	CheckOrders();

	// TODO: Additional evaluation of input from ADS indication or confirmations

	// TODO: Submit your ADS requests 
	ULONGLONG cnt = 0;
	if (SUCCEEDED(ipTask->GetCycleCounter(&cnt)))
	{
		if (cnt % 100 == 0)
		{
			SubmitAdsReadReq();
		}
	}

	/*******************************************************/
	if (libInitSuccess == false)						//开机初始化一次
	{
		robot.Init();									//机器人初始化
		libInitSuccess = true;
	}
	if (m_Inputs.jinting == 1048584)
	{
		for (int i = 0; i < 4; i++)
		{
			robot.vehicle.DrivingWheel[i].AxisCommand.Reset = true;
			robot.arm.SwingArm[i].AxisCommand.Reset = true;
			robot.vehicle.DrivingWheel[i].AxisCommand.Enable = false;
			robot.arm.SwingArm[i].AxisCommand.Enable = false;
		}
		for (int i = 0; i < 7; i++)
		{
			robot.mainpulator.Mainpu[i].AxisCommand.Reset = true;
			robot.mainpulator.Mainpu[i].AxisCommand.Enable = false;
		}
	}
	ReadFromPLC();
	if (((LONGLONG)robot.mainpulator.Mainpu[6].AxisStatus.velocity >> 18)&(0x01) == 1)
	{
		Clamp_InitPosition = robot.mainpulator.Mainpu[6].AxisStatus.position;
	}
	else
	{
		if (Clamp_InitPosition - robot.mainpulator.Mainpu[6].AxisStatus.position > 845000)
		{
			if (robot.mainpulator.Mainpu[6].AxisCommand.Velocity < 0)
				robot.mainpulator.Mainpu[6].AxisCommand.Velocity = 0;
		}
	}
	if (sign == 0)
	{
		if (handVelX != 0 || handVelY != 0)
		{
			robot.CalculateHandVelo(handVelX, handVelY, instruct);
		}
		else
		{
			robot.HandStop();
		}

	}
	if (sign == 1)
	{
		robot.HandStop();
	}
	robot.DecoderInstruct(instruct, indexCrl, velo, pos, carVeloX, carVeloY, handVelX, handVelY,flag);     //解码函数2，命令落实
	if (instruct != 0)
	{
		tpp = 1;
	}
	if (flag == 1)
	{
		if (robot.mainpulator.Mainpu[1].AxisStatus.position > -10)
		{
			flag = 0;
			robot.mainpulator.Mainpu[0].AxisCommand.Velocity = 4;
			robot.mainpulator.Mainpu[0].AxisCommand.Position = 58;
			robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute = true;
			instruct = 1;
		}
	}
	if (flag == 6)
	{
		if (robot.mainpulator.Mainpu[1].AxisStatus.position > -10)
		{
			flag = 0;
			robot.mainpulator.Mainpu[0].AxisCommand.Velocity = 4;
			robot.mainpulator.Mainpu[0].AxisCommand.Position = 55.6;
			robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute = true;
			instruct = 1;
		}
	}
	if (flag == 3)
	{
		if (robot.mainpulator.Mainpu[1].AxisStatus.position > -10)
		{
			flag = 0;
			robot.mainpulator.Mainpu[0].AxisCommand.Velocity = 4;
			robot.mainpulator.Mainpu[0].AxisCommand.Position = 62;
			robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute = true;
			instruct = 1;
		}
	}
	if (flag == 4)
	{
		if (robot.mainpulator.Mainpu[1].AxisStatus.position > -10)
		{
			flag = 0;
			robot.mainpulator.Mainpu[0].AxisCommand.Velocity = 4;
			robot.mainpulator.Mainpu[0].AxisCommand.Position = 60.6;
			robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute = true;
			instruct = 1;
		}
	}
	if (flag == 5)
	{
		if (robot.mainpulator.Mainpu[1].AxisStatus.position > -10)
		{
			flag = 0;
			robot.mainpulator.Mainpu[0].AxisCommand.Velocity = 4;
			robot.mainpulator.Mainpu[0].AxisCommand.Position = 55.6;
			robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute = true;
			instruct = 1;
		}
	}
	if (flag == 7)
	{
		if ( robot.mainpulator.Mainpu[0].AxisStatus.position<5)
		{
			flag = 0;
			for (int i = 0; i < 4; i++)
			{
				robot.arm.SwingArm[i].AxisCommand.Velocity = 8;
				robot.arm.SwingArm[i].AxisCommand.Position = -80;
				robot.arm.SwingArm[i].AxisCommand.MoveAbsolute = true;
			}
			robot.mainpulator.Mainpu[1].AxisCommand.Velocity = 10;
			robot.mainpulator.Mainpu[1].AxisCommand.Position = 45;
			robot.mainpulator.Mainpu[1].AxisCommand.MoveAbsolute = true;
			robot.mainpulator.Mainpu[3].AxisCommand.Velocity = 12;
			robot.mainpulator.Mainpu[3].AxisCommand.Position = -130;
			robot.mainpulator.Mainpu[3].AxisCommand.MoveAbsolute = true;
			robot.mainpulator.Mainpu[4].AxisCommand.Velocity = 10;
			robot.mainpulator.Mainpu[4].AxisCommand.Position = -80;
			robot.mainpulator.Mainpu[4].AxisCommand.MoveAbsolute = true;
		}
	}
	if (flag == 8)
	{
		if (robot.mainpulator.Mainpu[0].AxisStatus.position < 5)
		{
			flag = 0;
			robot.mainpulator.Mainpu[1].AxisCommand.Velocity = 12;
			robot.mainpulator.Mainpu[1].AxisCommand.Position = -40;
			robot.mainpulator.Mainpu[1].AxisCommand.MoveAbsolute = true;
			robot.mainpulator.Mainpu[3].AxisCommand.Velocity = 10;
			robot.mainpulator.Mainpu[3].AxisCommand.Position = -90;
			robot.mainpulator.Mainpu[3].AxisCommand.MoveAbsolute = true;
			robot.mainpulator.Mainpu[4].AxisCommand.Velocity = 10;
			robot.mainpulator.Mainpu[4].AxisCommand.Position = -30;
			robot.mainpulator.Mainpu[4].AxisCommand.MoveAbsolute = true;
		}
	}
	/*for (int i = 0; i < 4; i++)
	{
		if(( robot.arm.SwingArm[i].AxisStatus.position < -85 && robot.arm.SwingArm[i].AxisCommand.MoveVelocity == true&& robot.arm.SwingArm[i].AxisCommand.Velocity<0)||(robot.arm.SwingArm[i].AxisStatus.position > 85 && robot.arm.SwingArm[i].AxisCommand.MoveVelocity == true && robot.arm.SwingArm[i].AxisCommand.Velocity > 0))
		{
			robot.arm.SwingArm[i].AxisCommand.MoveVelocity = false;
			robot.arm.SwingArm[i].AxisCommand.Halt = true;
		}
	}*/
	WriteToPLC();
	if (tpp == 1)
	{
		if (instruct != 0 && instruct != 100)
		{
			sign = -1;
		}
		else
		{
			sign = 0;
		}
	}
	tpp = 0;
	if (sign != -1)
	{
		sign++;
		sign = sign % 2;
	}

	robot.ComdClear(instruct);					//命令清除
	instruct = 0;
	/*******************************************************/
	return hr;
}
///</AutoGeneratedContent>

///////////////////////////////////////////////////////////////////////////////
HRESULT CLibInterface::AddModuleToCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	HRESULT hr = S_OK;
	if ( m_spCyclicCaller.HasOID() )
	{
		if ( SUCCEEDED_DBG(hr = m_spSrv->TcQuerySmartObjectInterface(m_spCyclicCaller)) )
		{
			if ( FAILED(hr = m_spCyclicCaller->AddModule(m_spCyclicCaller, THIS_CAST(ITcCyclic))) )
			{
				m_spCyclicCaller = NULL;
			}
		}
	}
	else
	{
		hr = ADS_E_INVALIDOBJID; 
		SUCCEEDED_DBGT(hr, "Invalid OID specified for caller task");
	}
	m_Trace.Log(tlVerbose, FLEAVEA "hr=0x%08x", hr);
	return hr;
}

///////////////////////////////////////////////////////////////////////////////
VOID CLibInterface::RemoveModuleFromCaller()
{
	m_Trace.Log(tlVerbose, FENTERA);

	if ( m_spCyclicCaller )
	{
		m_spCyclicCaller->RemoveModule(m_spCyclicCaller);
	}
	m_spCyclicCaller	= NULL;
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CLibInterface::AdsReadWriteInd
(
	AmsAddr& rAddr, 
	ULONG invokeId, 
	ULONG indexGroup,
	ULONG indexOffset, 
	ULONG cbReadLength, 
	ULONG cbWriteLength, 
	PVOID pData 
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, indexGroup=0x%08x, indexOffset=0x%08x, cbReadLength=%d, cbWriteLength=%d, pData=0x%p",
		m_objId.value, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData);

	switch(indexGroup)
	{
	case LibInterfaceIndexGroup1:
		switch(indexOffset)
		{

		case LibInterfaceIndexOffset1://使能状态
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );

			if (indexSta < 4)
				pData = &robot.vehicle.DrivingWheel[indexSta].AxisStatus.Enable;
			else if (indexSta >= 4 && indexSta < 8)
			{
				pData = &robot.arm.SwingArm[indexSta - 4].AxisStatus.Enable;
			}
			else if (indexSta >= 8 && indexSta < 15)
			{
				pData = &robot.mainpulator.Mainpu[indexSta - 8].AxisStatus.Enable;
			}
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(bool), pData);
			break;

		case LibInterfaceIndexOffset2://速度状态
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x", 
				m_objId.value, indexGroup, indexOffset );
			if (indexSta < 4)
				pData = &robot.vehicle.DrivingWheel[indexSta].AxisStatus.velocity;
			else if (indexSta >= 4 && indexSta < 8)
			{
				pData = &robot.arm.SwingArm[indexSta - 4].AxisStatus.velocity;
			}
			else if (indexSta >= 8 && indexSta < 15)
			{
				pData = &robot.mainpulator.Mainpu[indexSta - 8].AxisStatus.velocity;
			}
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;

		case LibInterfaceIndexOffset3://位置状态
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			if (indexSta < 4)
				pData = &robot.vehicle.DrivingWheel[indexSta].AxisStatus.position;
			else if (indexSta >= 4 && indexSta < 8)
			{
				pData = &robot.arm.SwingArm[indexSta - 4].AxisStatus.position;
			}
			else if (indexSta >= 8 && indexSta < 15)
			{
				pData = &robot.mainpulator.Mainpu[indexSta - 8].AxisStatus.position;
			}
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;

		case LibInterfaceIndexOffset4://电流状态
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			if (indexSta < 4)
				pData = &robot.vehicle.DrivingWheel[indexSta].AxisStatus.Current;
			else if (indexSta >= 4 && indexSta < 8)
			{
				pData = &robot.arm.SwingArm[indexSta - 4].AxisStatus.Current;
			}
			else if (indexSta >= 8 && indexSta < 15)
			{
				pData = &robot.mainpulator.Mainpu[indexSta - 8].AxisStatus.Current;
			}
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(int), pData);
			break;

		case LibInterfaceIndexOffset5://x位置
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			{double tempx = 0;
			double a = robot.mainpulator.Mainpu[1].AxisStatus.position;
			double b = robot.mainpulator.Mainpu[3].AxisStatus.position;
			double c = robot.mainpulator.Mainpu[4].AxisStatus.position;
			double tempa = a;
			double tempb = b;
			a = a + 90;
			b = b + tempa + 90;
			c = c + tempb + tempa + 90;
			a = a / 180 * PI;
			b = b / 180 * PI;
			c = c / 180 * PI;
			tempx = 0.55*cos_(a) + 0.45*cos_(b) + 0.338*cos_(c);
			pData = &tempx; }
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;

		case LibInterfaceIndexOffset6://y位置
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			{double tempy = 0;
			double a = robot.mainpulator.Mainpu[1].AxisStatus.position;
			double b = robot.mainpulator.Mainpu[3].AxisStatus.position;
			double c = robot.mainpulator.Mainpu[4].AxisStatus.position;
			double tempa = a;
			double tempb = b;
			a = a + 90;
			b = b + tempa + 90;
			c = c + tempb + tempa + 90;
			a = a / 180 * PI;
			b = b / 180 * PI;
			c = c / 180 * PI;
			tempy = 0.55*sin_(a) + 0.45*sin_(b) + 0.338*sin_(c);

			pData = &tempy; }
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;
		case LibInterfaceIndexOffset7://大臂位置
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			{
				double a = robot.mainpulator.Mainpu[1].AxisStatus.position;
				double b = robot.mainpulator.Mainpu[3].AxisStatus.position;
				double c = robot.mainpulator.Mainpu[4].AxisStatus.position;
				double tempa = a;
				double tempb = b;
				a = a + 90;
				b = b + tempa + 90;
				c = c + tempb + tempa + 90;


			pData = &a; }
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;
		case LibInterfaceIndexOffset8://中臂位置
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			{
				double a = robot.mainpulator.Mainpu[1].AxisStatus.position;
				double b = robot.mainpulator.Mainpu[3].AxisStatus.position;
				double c = robot.mainpulator.Mainpu[4].AxisStatus.position;
				double tempa = a;
				double tempb = b;
				a = a + 90;
				b = b + tempa + 90;
				c = c + tempb + tempa + 90;

				pData = &b; }
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;
		case LibInterfaceIndexOffset9://小臂位置
			m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
				m_objId.value, indexGroup, indexOffset);
			{
				double a = robot.mainpulator.Mainpu[1].AxisStatus.position;
				double b = robot.mainpulator.Mainpu[3].AxisStatus.position;
				double c = robot.mainpulator.Mainpu[4].AxisStatus.position;
				double tempa = a;
				double tempb = b;
				a = a + 90;
				b = b + tempa + 90;
				c = c + tempb + tempa + 90;

				pData = &c; }
			AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
			break;
		}
		break;
	case LibInterfaceIndexGroup2:
		switch(indexOffset)
		{

		case LibInterfaceIndexOffset1://读指令号
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);

		int *pCounter1 = (int *)pData;
		instruct = *pCounter1;
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(int), pData); }
			break;

		case LibInterfaceIndexOffset2://读取要控制的轴ID
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);

		int *pCounter2 = (int *)pData;
		indexCrl = *pCounter2;
		if (indexCrl >= 4 && indexCrl < 8)
			indexCrl = indexCrl - 4;
		else if (indexCrl >= 8)
			indexCrl = indexCrl - 8;
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(int), pData); }
			break;

		case LibInterfaceIndexOffset3://读取位置
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);

		double *pCounter3 = (double *)pData;
		pos = *pCounter3;
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData); }
			break;

		case LibInterfaceIndexOffset4://读取速度
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);

		double *pCounter4 = (double *)pData;
		velo = *pCounter4;
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData); }
			break;

		case LibInterfaceIndexOffset5://读取车X速度
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
		double *pCounter5 = (double *)pData;
		carVeloX = *pCounter5; }
			break;
		case LibInterfaceIndexOffset6://读取车Y速度
		{m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
		double *pCounter6 = (double *)pData;
		carVeloY = *pCounter6; }
			break;

		case LibInterfaceIndexOffset7://读取手X速度
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
		double *pCounter7 = (double *)pData;
		handVelX = *pCounter7; }
			break;
		case LibInterfaceIndexOffset8://读取手Y速度
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(double), pData);
		double *pCounter8 = (double *)pData;
		handVelY = *pCounter8; }
			break;
		case LibInterfaceIndexOffset9://要读状态的轴ID
		{	m_Trace.Log(tlInfo, FNAMEA "oid=0x%08x indexGroup=0x%08x, indexOffset=0x%08x",
			m_objId.value, indexGroup, indexOffset);

		int *pCounter9 = (int *)pData;
		indexSta = *pCounter9;
		AdsReadWriteRes(rAddr, invokeId, ADSERR_NOERR, sizeof(int), pData); }
			break;

		}
		break;
	default:
		__super::AdsReadWriteInd(rAddr, invokeId, indexGroup, indexOffset, cbReadLength, cbWriteLength, pData); 
		break;
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}


void CLibInterface::SubmitAdsReadReq()
{
	m_Trace.Log(tlVerbose, FENTERA);
	// m_ContextAdsPort contains the ADS port number of the task associated with context 1
	// amsAddr refers to the ADS port of this task 
	AmsAddr amsAddr(this->AmsGetNetId(), m_ContextAdsPort);

	// Request the value of a parameter from a TwinCAT module instance
	// via the task ADS port.
	// The object id of the instance is passed as index group and
	// the parameter id is passed as index offset.
	// The result is delivered by a call to AdsReadCon and can 
	// be identified by the invoke id. 
	int nRes = 
		AdsReadReq
		(
			amsAddr, 
			invokeIdReadByOidAndPid, 
			m_objId.value, 
			PID_LibInterfaceCounter,
			sizeof(m_ReadByOidAndPid)
		);
	if (nRes != ADSERR_NOERR)
	{
		m_Trace.Log(tlError, FNAMEA "AdsReadReq failed with error=0x%08x(%s)", nRes, AdsGetErrorText(nRes));
	}
	else
	{
		m_Trace.Log(tlInfo, FNAMEA "AdsReadReq by oid=0x%08x and pid=0x%08x", m_objId.value, PID_LibInterfaceAdsPort);
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

///////////////////////////////////////////////////////////////////////////////
void CLibInterface::AdsReadCon
(
	AmsAddr& rAddr,
	ULONG invokeId,
	ULONG nResult,
	ULONG cbLength,
	PVOID pData
)
{
	m_Trace.Log(tlVerbose, FENTERA "oid=0x%08x, invokeId=%d, nResult=0x%08x, cbLength=%d, pData=0x%p",
		m_objId.value, invokeId, nResult, cbLength, pData);

	if (invokeId == invokeIdReadByOidAndPid)
	{
		if (nResult != ADSERR_NOERR)
		{
			m_Trace.Log(tlWarning, FNAMEA "ReadByOidAndPid failed with error=0x%x(%s)",
				nResult, AdsGetErrorText(nResult));
		}
		else if (cbLength == sizeof(m_ReadByOidAndPid))
		{
			m_ReadByOidAndPid = *static_cast<PULONG>(pData); 
			m_Trace.Log(tlInfo, FNAMEA "m_ReadByOidAndPid=0x%x", m_ReadByOidAndPid);
		}
	}
	else
	{
		__super::AdsReadWriteCon( rAddr, invokeId, nResult, cbLength, pData );
	}
	m_Trace.Log(tlVerbose, FLEAVEA);
}

void CLibInterface::ReadFromPLC()
{
	robot.vehicle.DrivingWheel[0].AxisStatus.Enable = m_Inputs.DrivingWheel1Output.Enable;
	robot.vehicle.DrivingWheel[0].AxisStatus.position = m_Inputs.DrivingWheel1Output.Position;
	robot.vehicle.DrivingWheel[0].AxisStatus.velocity = m_Inputs.DrivingWheel1Output.Velocity;
	robot.vehicle.DrivingWheel[0].AxisStatus.Current = m_Inputs.DrivingWheel1Output.Current;

	robot.vehicle.DrivingWheel[1].AxisStatus.Enable = m_Inputs.DrivingWheel2Output.Enable;
	robot.vehicle.DrivingWheel[1].AxisStatus.position = m_Inputs.DrivingWheel2Output.Position;
	robot.vehicle.DrivingWheel[1].AxisStatus.velocity = m_Inputs.DrivingWheel2Output.Velocity;
	robot.vehicle.DrivingWheel[1].AxisStatus.Current = m_Inputs.DrivingWheel2Output.Current;

	robot.vehicle.DrivingWheel[2].AxisStatus.Enable = m_Inputs.DrivingWheel3Output.Enable;
	robot.vehicle.DrivingWheel[2].AxisStatus.position = m_Inputs.DrivingWheel3Output.Position;
	robot.vehicle.DrivingWheel[2].AxisStatus.velocity = m_Inputs.DrivingWheel3Output.Velocity;
	robot.vehicle.DrivingWheel[2].AxisStatus.Current = m_Inputs.DrivingWheel3Output.Current;

	robot.vehicle.DrivingWheel[3].AxisStatus.Enable = m_Inputs.DrivingWheel4Output.Enable;
	robot.vehicle.DrivingWheel[3].AxisStatus.position = m_Inputs.DrivingWheel4Output.Position;
	robot.vehicle.DrivingWheel[3].AxisStatus.velocity = m_Inputs.DrivingWheel4Output.Velocity;
	robot.vehicle.DrivingWheel[3].AxisStatus.Current = m_Inputs.DrivingWheel4Output.Current;

	robot.arm.SwingArm[0].AxisStatus.Enable = m_Inputs.SwingArm1Output.Enable;
	robot.arm.SwingArm[0].AxisStatus.position = m_Inputs.SwingArm1Output.Position - 12237.47-90+ 12476.39-64.47;
	robot.arm.SwingArm[0].AxisStatus.velocity = m_Inputs.SwingArm1Output.Velocity;
	robot.arm.SwingArm[0].AxisStatus.Current = m_Inputs.SwingArm1Output.Current;

	robot.arm.SwingArm[1].AxisStatus.Enable = m_Inputs.SwingArm2Output.Enable;
	robot.arm.SwingArm[1].AxisStatus.position = m_Inputs.SwingArm2Output.Position + 200.29-90;
	robot.arm.SwingArm[1].AxisStatus.velocity = m_Inputs.SwingArm2Output.Velocity;
	robot.arm.SwingArm[1].AxisStatus.Current = m_Inputs.SwingArm2Output.Current;

	robot.arm.SwingArm[2].AxisStatus.Enable = m_Inputs.SwingArm3Output.Enable;
	robot.arm.SwingArm[2].AxisStatus.position = m_Inputs.SwingArm3Output.Position - 12250.18-90+ 12480.54-67.11;
	robot.arm.SwingArm[2].AxisStatus.velocity = m_Inputs.SwingArm3Output.Velocity;
	robot.arm.SwingArm[2].AxisStatus.Current = m_Inputs.SwingArm3Output.Current;

	robot.arm.SwingArm[3].AxisStatus.Enable = m_Inputs.SwingArm4Output.Enable;
	robot.arm.SwingArm[3].AxisStatus.position = m_Inputs.SwingArm4Output.Position + 164.12-90;
	robot.arm.SwingArm[3].AxisStatus.velocity = m_Inputs.SwingArm4Output.Velocity;
	robot.arm.SwingArm[3].AxisStatus.Current = m_Inputs.SwingArm4Output.Current;

	robot.mainpulator.Mainpu[0].AxisStatus.Enable = m_Inputs.WaistOutput.Enable;
	robot.mainpulator.Mainpu[0].AxisStatus.position = m_Inputs.WaistOutput.Position;
	robot.mainpulator.Mainpu[0].AxisStatus.velocity = m_Inputs.WaistOutput.Velocity;
	robot.mainpulator.Mainpu[0].AxisStatus.Current = m_Inputs.WaistOutput.Current;

	robot.mainpulator.Mainpu[1].AxisStatus.Enable = m_Inputs.BigArmOutput.Enable;
	robot.mainpulator.Mainpu[1].AxisStatus.position = m_Inputs.BigArmOutput.Position;
	robot.mainpulator.Mainpu[1].AxisStatus.velocity = m_Inputs.BigArmOutput.Velocity;
	robot.mainpulator.Mainpu[1].AxisStatus.Current = m_Inputs.BigArmOutput.Current;

	robot.mainpulator.Mainpu[2].AxisStatus.Enable = m_Inputs.FlexOutput.Enable;
	robot.mainpulator.Mainpu[2].AxisStatus.position = m_Inputs.FlexOutput.Position;
	robot.mainpulator.Mainpu[2].AxisStatus.velocity = m_Inputs.FlexOutput.Velocity;
	robot.mainpulator.Mainpu[2].AxisStatus.Current = m_Inputs.FlexOutput.Current;

	robot.mainpulator.Mainpu[3].AxisStatus.Enable = m_Inputs.MiddleArmOutput.Enable;
	robot.mainpulator.Mainpu[3].AxisStatus.position = m_Inputs.MiddleArmOutput.Position;
	robot.mainpulator.Mainpu[3].AxisStatus.velocity = m_Inputs.MiddleArmOutput.Velocity;
	robot.mainpulator.Mainpu[3].AxisStatus.Current = m_Inputs.MiddleArmOutput.Current;

	robot.mainpulator.Mainpu[4].AxisStatus.Enable = m_Inputs.SmallArmOutput.Enable;
	robot.mainpulator.Mainpu[4].AxisStatus.position = m_Inputs.SmallArmOutput.Position;
	robot.mainpulator.Mainpu[4].AxisStatus.velocity = m_Inputs.SmallArmOutput.Velocity;
	robot.mainpulator.Mainpu[4].AxisStatus.Current = m_Inputs.SmallArmOutput.Current;

	robot.mainpulator.Mainpu[5].AxisStatus.Enable = m_Inputs.RotationOutput.Enable;
	robot.mainpulator.Mainpu[5].AxisStatus.position = m_Inputs.RotationOutput.Position;
	robot.mainpulator.Mainpu[5].AxisStatus.velocity = m_Inputs.RotationOutput.Velocity;
	robot.mainpulator.Mainpu[5].AxisStatus.Current = m_Inputs.RotationOutput.Current;

	robot.mainpulator.Mainpu[6].AxisStatus.position = m_Inputs.ClampOutput.Position;
	robot.mainpulator.Mainpu[6].AxisStatus.velocity = m_Inputs.ClampOutput.IO;

}

void CLibInterface::WriteToPLC()
{
	m_Outputs.DrivingWheel1Input.Enable = robot.vehicle.DrivingWheel[0].AxisCommand.Enable;
	m_Outputs.DrivingWheel1Input.Halt = robot.vehicle.DrivingWheel[0].AxisCommand.Halt;
	m_Outputs.DrivingWheel1Input.Home = robot.vehicle.DrivingWheel[0].AxisCommand.Home;
	m_Outputs.DrivingWheel1Input.MoveAbsolute = robot.vehicle.DrivingWheel[0].AxisCommand.MoveAbsolute;
	m_Outputs.DrivingWheel1Input.MoveRelative = robot.vehicle.DrivingWheel[0].AxisCommand.MoveRelative;
	m_Outputs.DrivingWheel1Input.MoveVelocity = robot.vehicle.DrivingWheel[0].AxisCommand.MoveVelocity;
	m_Outputs.DrivingWheel1Input.Position = robot.vehicle.DrivingWheel[0].AxisCommand.Position;
	m_Outputs.DrivingWheel1Input.Velocity = robot.vehicle.DrivingWheel[0].AxisCommand.Velocity;
	m_Outputs.DrivingWheel1Input.Reset = robot.vehicle.DrivingWheel[0].AxisCommand.Reset;

	m_Outputs.DrivingWheel2Input.Enable = robot.vehicle.DrivingWheel[1].AxisCommand.Enable;
	m_Outputs.DrivingWheel2Input.Halt = robot.vehicle.DrivingWheel[1].AxisCommand.Halt;
	m_Outputs.DrivingWheel2Input.Home = robot.vehicle.DrivingWheel[1].AxisCommand.Home;
	m_Outputs.DrivingWheel2Input.MoveAbsolute = robot.vehicle.DrivingWheel[1].AxisCommand.MoveAbsolute;
	m_Outputs.DrivingWheel2Input.MoveRelative = robot.vehicle.DrivingWheel[1].AxisCommand.MoveRelative;
	m_Outputs.DrivingWheel2Input.MoveVelocity = robot.vehicle.DrivingWheel[1].AxisCommand.MoveVelocity;
	m_Outputs.DrivingWheel2Input.Position = robot.vehicle.DrivingWheel[1].AxisCommand.Position;
	m_Outputs.DrivingWheel2Input.Velocity = robot.vehicle.DrivingWheel[1].AxisCommand.Velocity;
	m_Outputs.DrivingWheel2Input.Reset = robot.vehicle.DrivingWheel[1].AxisCommand.Reset;
	m_Outputs.lighting = robot.vehicle.DrivingWheel[1].AxisCommand.lighting;

	m_Outputs.DrivingWheel3Input.Enable = robot.vehicle.DrivingWheel[2].AxisCommand.Enable;
	m_Outputs.DrivingWheel3Input.Halt = robot.vehicle.DrivingWheel[2].AxisCommand.Halt;
	m_Outputs.DrivingWheel3Input.Home = robot.vehicle.DrivingWheel[2].AxisCommand.Home;
	m_Outputs.DrivingWheel3Input.MoveAbsolute = robot.vehicle.DrivingWheel[2].AxisCommand.MoveAbsolute;
	m_Outputs.DrivingWheel3Input.MoveRelative = robot.vehicle.DrivingWheel[2].AxisCommand.MoveRelative;
	m_Outputs.DrivingWheel3Input.MoveVelocity = robot.vehicle.DrivingWheel[2].AxisCommand.MoveVelocity;
	m_Outputs.DrivingWheel3Input.Position = robot.vehicle.DrivingWheel[2].AxisCommand.Position;
	m_Outputs.DrivingWheel3Input.Velocity = robot.vehicle.DrivingWheel[2].AxisCommand.Velocity;
	m_Outputs.DrivingWheel3Input.Reset = robot.vehicle.DrivingWheel[2].AxisCommand.Reset;

	m_Outputs.DrivingWheel4Input.Enable = robot.vehicle.DrivingWheel[3].AxisCommand.Enable;
	m_Outputs.DrivingWheel4Input.Halt = robot.vehicle.DrivingWheel[3].AxisCommand.Halt;
	m_Outputs.DrivingWheel4Input.Home = robot.vehicle.DrivingWheel[3].AxisCommand.Home;
	m_Outputs.DrivingWheel4Input.MoveAbsolute = robot.vehicle.DrivingWheel[3].AxisCommand.MoveAbsolute;
	m_Outputs.DrivingWheel4Input.MoveRelative = robot.vehicle.DrivingWheel[3].AxisCommand.MoveRelative;
	m_Outputs.DrivingWheel4Input.MoveVelocity = robot.vehicle.DrivingWheel[3].AxisCommand.MoveVelocity;
	m_Outputs.DrivingWheel4Input.Position = robot.vehicle.DrivingWheel[3].AxisCommand.Position;
	m_Outputs.DrivingWheel4Input.Velocity = robot.vehicle.DrivingWheel[3].AxisCommand.Velocity;
	m_Outputs.DrivingWheel4Input.Reset = robot.vehicle.DrivingWheel[3].AxisCommand.Reset;

	m_Outputs.SwingArm1Input.Enable = robot.arm.SwingArm[0].AxisCommand.Enable;
	m_Outputs.SwingArm1Input.Halt = robot.arm.SwingArm[0].AxisCommand.Halt;
	m_Outputs.SwingArm1Input.Home = robot.arm.SwingArm[0].AxisCommand.Home;
	m_Outputs.SwingArm1Input.MoveAbsolute = robot.arm.SwingArm[0].AxisCommand.MoveAbsolute;
	m_Outputs.SwingArm1Input.MoveRelative = robot.arm.SwingArm[0].AxisCommand.MoveRelative;
	m_Outputs.SwingArm1Input.MoveVelocity = robot.arm.SwingArm[0].AxisCommand.MoveVelocity;
	m_Outputs.SwingArm1Input.Position = robot.arm.SwingArm[0].AxisCommand.Position + 12237.47 + 90+90 - 12476.39 + 64.47;
	m_Outputs.SwingArm1Input.Velocity = robot.arm.SwingArm[0].AxisCommand.Velocity;
	m_Outputs.SwingArm1Input.Reset = robot.arm.SwingArm[0].AxisCommand.Reset;
	m_Outputs.SwingArm1Input.SetZero = robot.arm.SwingArm[0].AxisCommand.SetZero;

	m_Outputs.SwingArm2Input.Enable = robot.arm.SwingArm[1].AxisCommand.Enable;
	m_Outputs.SwingArm2Input.Halt = robot.arm.SwingArm[1].AxisCommand.Halt;
	m_Outputs.SwingArm2Input.Home = robot.arm.SwingArm[1].AxisCommand.Home;
	m_Outputs.SwingArm2Input.MoveAbsolute = robot.arm.SwingArm[1].AxisCommand.MoveAbsolute;
	m_Outputs.SwingArm2Input.MoveRelative = robot.arm.SwingArm[1].AxisCommand.MoveRelative;
	m_Outputs.SwingArm2Input.MoveVelocity = robot.arm.SwingArm[1].AxisCommand.MoveVelocity;
	m_Outputs.SwingArm2Input.Position = robot.arm.SwingArm[1].AxisCommand.Position - 200.29 + 90+90;
	m_Outputs.SwingArm2Input.Velocity = robot.arm.SwingArm[1].AxisCommand.Velocity;
	m_Outputs.SwingArm2Input.Reset = robot.arm.SwingArm[1].AxisCommand.Reset;
	m_Outputs.SwingArm2Input.SetZero = robot.arm.SwingArm[1].AxisCommand.SetZero;

	m_Outputs.SwingArm3Input.Enable = robot.arm.SwingArm[2].AxisCommand.Enable;
	m_Outputs.SwingArm3Input.Halt = robot.arm.SwingArm[2].AxisCommand.Halt;
	m_Outputs.SwingArm3Input.Home = robot.arm.SwingArm[2].AxisCommand.Home;
	m_Outputs.SwingArm3Input.MoveAbsolute = robot.arm.SwingArm[2].AxisCommand.MoveAbsolute;
	m_Outputs.SwingArm3Input.MoveRelative = robot.arm.SwingArm[2].AxisCommand.MoveRelative;
	m_Outputs.SwingArm3Input.MoveVelocity = robot.arm.SwingArm[2].AxisCommand.MoveVelocity;
	m_Outputs.SwingArm3Input.Position = robot.arm.SwingArm[2].AxisCommand.Position + 12250.18 + 90+90 - 12480.54 + 67.11;
	m_Outputs.SwingArm3Input.Velocity = robot.arm.SwingArm[2].AxisCommand.Velocity;
	m_Outputs.SwingArm3Input.Reset = robot.arm.SwingArm[2].AxisCommand.Reset;
	m_Outputs.SwingArm3Input.SetZero = robot.arm.SwingArm[2].AxisCommand.SetZero;

	m_Outputs.SwingArm4Input.Enable = robot.arm.SwingArm[3].AxisCommand.Enable;
	m_Outputs.SwingArm4Input.Halt = robot.arm.SwingArm[3].AxisCommand.Halt;
	m_Outputs.SwingArm4Input.Home = robot.arm.SwingArm[3].AxisCommand.Home;
	m_Outputs.SwingArm4Input.MoveAbsolute = robot.arm.SwingArm[3].AxisCommand.MoveAbsolute;
	m_Outputs.SwingArm4Input.MoveRelative = robot.arm.SwingArm[3].AxisCommand.MoveRelative;
	m_Outputs.SwingArm4Input.MoveVelocity = robot.arm.SwingArm[3].AxisCommand.MoveVelocity;
	m_Outputs.SwingArm4Input.Position = robot.arm.SwingArm[3].AxisCommand.Position - 164.12 + 90+90;
	m_Outputs.SwingArm4Input.Velocity = robot.arm.SwingArm[3].AxisCommand.Velocity;
	m_Outputs.SwingArm4Input.Reset = robot.arm.SwingArm[3].AxisCommand.Reset;
	m_Outputs.SwingArm4Input.SetZero = robot.arm.SwingArm[3].AxisCommand.SetZero;

	m_Outputs.WaistInput.Enable = robot.mainpulator.Mainpu[0].AxisCommand.Enable;
	m_Outputs.WaistInput.Halt = robot.mainpulator.Mainpu[0].AxisCommand.Halt;
	m_Outputs.WaistInput.Home = robot.mainpulator.Mainpu[0].AxisCommand.Home;
	m_Outputs.WaistInput.MoveAbsolute = robot.mainpulator.Mainpu[0].AxisCommand.MoveAbsolute;
	m_Outputs.WaistInput.MoveRelative = robot.mainpulator.Mainpu[0].AxisCommand.MoveRelative;
	m_Outputs.WaistInput.MoveVelocity = robot.mainpulator.Mainpu[0].AxisCommand.MoveVelocity;
	m_Outputs.WaistInput.Position = robot.mainpulator.Mainpu[0].AxisCommand.Position;
	m_Outputs.WaistInput.Velocity = robot.mainpulator.Mainpu[0].AxisCommand.Velocity;
	m_Outputs.WaistInput.Reset = robot.mainpulator.Mainpu[0].AxisCommand.Reset;

	m_Outputs.BigArmInput.Enable = robot.mainpulator.Mainpu[1].AxisCommand.Enable;
	m_Outputs.BigArmInput.Halt = robot.mainpulator.Mainpu[1].AxisCommand.Halt;
	m_Outputs.BigArmInput.Home = robot.mainpulator.Mainpu[1].AxisCommand.Home;
	m_Outputs.BigArmInput.MoveAbsolute = robot.mainpulator.Mainpu[1].AxisCommand.MoveAbsolute;
	m_Outputs.BigArmInput.MoveRelative = robot.mainpulator.Mainpu[1].AxisCommand.MoveRelative;
	m_Outputs.BigArmInput.MoveVelocity = robot.mainpulator.Mainpu[1].AxisCommand.MoveVelocity;
	m_Outputs.BigArmInput.Position = robot.mainpulator.Mainpu[1].AxisCommand.Position;
	m_Outputs.BigArmInput.Velocity = robot.mainpulator.Mainpu[1].AxisCommand.Velocity;
	m_Outputs.BigArmInput.Reset = robot.mainpulator.Mainpu[1].AxisCommand.Reset;
	m_Outputs.BigArmInput.SetZero = robot.mainpulator.Mainpu[1].AxisCommand.SetZero;

	m_Outputs.FlexInput.Enable = robot.mainpulator.Mainpu[2].AxisCommand.Enable;
	m_Outputs.FlexInput.Halt = robot.mainpulator.Mainpu[2].AxisCommand.Halt;
	m_Outputs.FlexInput.Home = robot.mainpulator.Mainpu[2].AxisCommand.Home;
	m_Outputs.FlexInput.MoveAbsolute = robot.mainpulator.Mainpu[2].AxisCommand.MoveAbsolute;
	m_Outputs.FlexInput.MoveRelative = robot.mainpulator.Mainpu[2].AxisCommand.MoveRelative;
	m_Outputs.FlexInput.MoveVelocity = robot.mainpulator.Mainpu[2].AxisCommand.MoveVelocity;
	m_Outputs.FlexInput.Position = robot.mainpulator.Mainpu[2].AxisCommand.Position;
	m_Outputs.FlexInput.Velocity = robot.mainpulator.Mainpu[2].AxisCommand.Velocity;
	m_Outputs.FlexInput.Reset = robot.mainpulator.Mainpu[2].AxisCommand.Reset;

	m_Outputs.MiddleArmInput.Enable = robot.mainpulator.Mainpu[3].AxisCommand.Enable;
	m_Outputs.MiddleArmInput.Halt = robot.mainpulator.Mainpu[3].AxisCommand.Halt;
	m_Outputs.MiddleArmInput.Home = robot.mainpulator.Mainpu[3].AxisCommand.Home;
	m_Outputs.MiddleArmInput.MoveAbsolute = robot.mainpulator.Mainpu[3].AxisCommand.MoveAbsolute;
	m_Outputs.MiddleArmInput.MoveRelative = robot.mainpulator.Mainpu[3].AxisCommand.MoveRelative;
	m_Outputs.MiddleArmInput.MoveVelocity = robot.mainpulator.Mainpu[3].AxisCommand.MoveVelocity;
	m_Outputs.MiddleArmInput.Position = robot.mainpulator.Mainpu[3].AxisCommand.Position;
	m_Outputs.MiddleArmInput.Velocity = robot.mainpulator.Mainpu[3].AxisCommand.Velocity;
	m_Outputs.MiddleArmInput.Reset = robot.mainpulator.Mainpu[3].AxisCommand.Reset;
	m_Outputs.MiddleArmInput.SetZero = robot.mainpulator.Mainpu[3].AxisCommand.SetZero;

	m_Outputs.SmallArmInput.Enable = robot.mainpulator.Mainpu[4].AxisCommand.Enable;
	m_Outputs.SmallArmInput.Halt = robot.mainpulator.Mainpu[4].AxisCommand.Halt;
	m_Outputs.SmallArmInput.Home = robot.mainpulator.Mainpu[4].AxisCommand.Home;
	m_Outputs.SmallArmInput.MoveAbsolute = robot.mainpulator.Mainpu[4].AxisCommand.MoveAbsolute;
	m_Outputs.SmallArmInput.MoveRelative = robot.mainpulator.Mainpu[4].AxisCommand.MoveRelative;
	m_Outputs.SmallArmInput.MoveVelocity = robot.mainpulator.Mainpu[4].AxisCommand.MoveVelocity;
	m_Outputs.SmallArmInput.Position = robot.mainpulator.Mainpu[4].AxisCommand.Position;
	m_Outputs.SmallArmInput.Velocity = robot.mainpulator.Mainpu[4].AxisCommand.Velocity;
	m_Outputs.SmallArmInput.Reset = robot.mainpulator.Mainpu[4].AxisCommand.Reset;
	m_Outputs.SmallArmInput.SetZero = robot.mainpulator.Mainpu[4].AxisCommand.SetZero;

	m_Outputs.RotationInput.Enable = robot.mainpulator.Mainpu[5].AxisCommand.Enable;
	m_Outputs.RotationInput.Halt = robot.mainpulator.Mainpu[5].AxisCommand.Halt;
	m_Outputs.RotationInput.Home = robot.mainpulator.Mainpu[5].AxisCommand.Home;
	m_Outputs.RotationInput.MoveAbsolute = robot.mainpulator.Mainpu[5].AxisCommand.MoveAbsolute;
	m_Outputs.RotationInput.MoveRelative = robot.mainpulator.Mainpu[5].AxisCommand.MoveRelative;
	m_Outputs.RotationInput.MoveVelocity = robot.mainpulator.Mainpu[5].AxisCommand.MoveVelocity;
	m_Outputs.RotationInput.Position = robot.mainpulator.Mainpu[5].AxisCommand.Position;
	m_Outputs.RotationInput.Velocity = robot.mainpulator.Mainpu[5].AxisCommand.Velocity;
	m_Outputs.RotationInput.Reset = robot.mainpulator.Mainpu[5].AxisCommand.Reset;

	m_Outputs.ClampInput.Enable = robot.mainpulator.Mainpu[6].AxisCommand.Enable==true?1:0;
	m_Outputs.ClampInput.SetSpped = robot.mainpulator.Mainpu[6].AxisCommand.Velocity;
}


